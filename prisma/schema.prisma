generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Workspace {
  id                String       @id @default(cuid())
  slackTeamId       String       @unique
  teamName          String
  teamDomain        String?
  botUserId         String?
  botAccessToken    String?      // Encrypted
  userAccessToken   String?      // Encrypted (if user tokens needed)
  appId             String?      // For BYOSA
  isActive          Boolean      @default(true)
  settings          Json         @default("{}")
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  
  channels          Channel[]
  documents         Document[]
  auditLogs         AuditLog[]
  memories          UserMemory[]
  
  @@map("workspaces")
}

model Channel {
  id              String    @id @default(cuid())
  workspaceId     String
  channelId       String
  name            String
  isPrivate       Boolean   @default(false)
  isEnabled       Boolean   @default(false)
  containerTags   String[]  @default([])
  settings        Json      @default("{}")
  lastActivity    DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  workspace       Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  @@unique([workspaceId, channelId])
  @@map("channels")
}

model Document {
  id              String           @id @default(cuid())
  workspaceId     String
  supermemoryId   String?          // ID in Supermemory system
  title           String
  type            DocumentType
  source          String?          // URL, file path, or source identifier
  containerTags   String[]         @default([])
  metadata        Json             @default("{}")
  status          ProcessingStatus @default(PENDING)
  error           String?
  size            Int?             // File size in bytes
  mimeType        String?
  uploadedBy      String?          // Slack user ID
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  workspace       Workspace        @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  @@map("documents")
}

model UserMemory {
  id            String    @id @default(cuid())
  workspaceId   String
  userId        String    // Slack user ID
  content       String
  containerTags String[]  @default([])
  metadata      Json      @default("{}")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  workspace     Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  @@unique([workspaceId, userId, content])
  @@map("user_memories")
}

model AuditLog {
  id          String    @id @default(cuid())
  workspaceId String
  userId      String?   // Slack user ID if available
  action      String
  target      String?   // Channel ID, document ID, etc.
  details     Json      @default("{}")
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime  @default(now())
  
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  @@map("audit_logs")
}

model CustomerApp {
  id              String   @id @default(cuid())
  customerId      String   @unique
  customerName    String
  appName         String
  clientId        String   // Encrypted
  clientSecret    String   // Encrypted
  signingSecret   String   // Encrypted
  scopes          String[] @default([])
  redirectUrls    String[] @default([])
  isActive        Boolean  @default(true)
  settings        Json     @default("{}")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("customer_apps")
}

model RateLimitEntry {
  id        String   @id @default(cuid())
  key       String   @unique
  count     Int      @default(1)
  resetAt   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("rate_limits")
}

enum DocumentType {
  PDF
  DOCX
  PPTX
  CSV
  TXT
  MD
  URL
  TEXT
  IMAGE
  AUDIO
  VIDEO
}

enum ProcessingStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}
